This directory contains the python bindings for avg_q (in the
avg_q/ subdirectory) and general scripts using these bindings.

For a very first check, you can do "python avg_q/avg_q.py". If this
gets you an output of the form "sfreq=10\nnr_of_points=20\n..." then
avg_q is properly accessible from the avg_q python module.

Note that the code is tailored to be python 3-clean. It will run with python 2
as well, starting with version 2.6.

Included scripts:

Windows_glob_example.py: A worked example displaying the first 2s of all
EDF files in a certain directory. Intended as a good place to start.

show_any: Will use avg_q_ui to display whatever file(s) were given on the
command line, using format autodetection. Each file will be read as a single
epoch and all files are shown as "linked" epochs in posplot. Note that posplot
has the ability to show files with different channels, sampling rates and data
lengths simultaneously.  Special care is taken to show any triggers included in
the input files as well.

check_crossings: Count trigger codes and output statistics on temporal distances
between triggers with the same code. It will work on avg_q style ".trg" or ".crs"
trigger text files but will also automatically extract triggers from any known file
format.

show_maps: Uses matplotlib to show topographic maps for all points in a given file.

voglps2svg and voglps2svg.cairo: Generate SVG (scalable vector graphics) format from
postscript .ps posplot output files. This allows to have very nice editable vector
graphics for any plot shown by posplot.
For parsing, voglps.py is used, and for output, voglps2svg uses SVG.py ((c)
Rick Muller http://code.activestate.com/recipes/325823/), while
voglps2svg.cairo uses the python cairo bindings (http://cairographics.org/pycairo/).
voglps2svg is recommended because of the better editable text representation.
